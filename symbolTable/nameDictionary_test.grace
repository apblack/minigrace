import "dictionaryTest" as dictionaryTestimport "variables" as variablesimport "gUnit" as gUimport "nameDictionary" as nameDictionaryimport "ast" as astdef markerSignature = [ ast.signaturePart.partName(nameDictionary.magicKey) ]def markerMethodNode = ast.methodNode.new(markerSignature, ast.nullNode, ast.unknownType)def markerVar = variables.graceMethodFrom(markerMethodNode)        class forMethod(m) {    inherit dictionaryTest.dictionaryTest.forMethod(m)        alias superSetup = setup    // Tests for nameDictionary.  It should pass all of the dictionary tests,     // but also additional tests for the special names like if(_)then(_)else(_).    var nonEmptyDict        method dictionaryUnderTestWith (bindings) {        nameDictionary.withAll (bindings)    }    method dictionaryUnderTestEmpty { nameDictionary.empty }    method dictionaryUnderTestFactory { nameDictionary }    method setup {        superSetup        nonEmptyDict := nameDictionary⟦String, Unknown⟧.withAll                    ["two"::2, "four"::4, "six"::6, "eight"::8,                     nameDictionary.magicKey::markerVar]    }    method testSetup {         self.assert (nonEmptyDict.containsKey "eight")               description "nonEmptyDict does not contain key \"eight\""         self.assert (nonEmptyDict.containsKey (nameDictionary.magicKey))               description "nonEmptyDict does not contain key \"{nameDictionary.magicKey}\""    }    method testMarkerVar {        self.assert (markerVar.isMethod)              description "{markerVar} does not represent a method"    }    method testTryCatchFinally {        def tcVariable = nonEmptyDict.at "try(_)catch(_)finally(_)"        self.assert (tcVariable.isSpecialControlStructure)             description "{tcVariable} is not a special control structure"    }    method testControlStructureRegEx_matches_try_catch_finally {        self.assert (nameDictionary.ctrlStructureRegEx.matches "try(_)catch(_)finally(_)")    }    method testControlStructureRegEx_matches_try_catch_catch {        self.assert (nameDictionary.ctrlStructureRegEx.matches "try(_)catch(_)catch(_)")    }    method testNameInsertedAfterLookup {        self.assert (nonEmptyDict.asString) shouldBe (            "dictionary [six::6, two::2, four::4, eight::8, " ++            "standardGraceExtendedControlStructures::meth standardGraceExtendedControlStructures]" )        self.assert (nonEmptyDict.at "match(_)case(_)case(_)".isMatchCase)                self.assert (nonEmptyDict.asString) shouldBe (            "dictionary [six::6, two::2, four::4, eight::8, " ++             "match(_)case(_)case(_)::ctrl match(_)case(_)case(_), " ++             "standardGraceExtendedControlStructures::meth standardGraceExtendedControlStructures]" )    }    method testMatchCaseCase {        self.assert (nonEmptyDict.at "match(_)case(_)case(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "match(_)case(_)case(_)".isMatchCase)    }    method testTryCatch {        self.assert (nonEmptyDict.at "try(_)catch(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "try(_)catch(_)".isTryCatch)    }    method testMatchCase {        self.assert (nonEmptyDict.at "match(_)case(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "match(_)case(_)".isMatchCase)    }    method testIfThenElseIfThenElseIfThen {        self.assert (nonEmptyDict.at "if(_)then(_)elseif(_)then(_)elseif(_)then(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "if(_)then(_)elseif(_)then(_)elseif(_)then(_)".isIfThenElse)    }    method testIfThenElseIfElse {        self.assert (nonEmptyDict.at "if(_)then(_)elseif(_)then(_)else(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "if(_)then(_)elseif(_)then(_)else(_)".isIfThenElse)    }    method testIfThen {        self.assert (nonEmptyDict.at "if(_)then(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "if(_)then(_)".isIfThenElse)    }    method testIfThenElse {        self.assert (nonEmptyDict.at "if(_)then(_)else(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "if(_)then(_)else(_)".isIfThenElse)    }    method testTryCatchCatchFinally {        self.assert (nonEmptyDict.at "try(_)catch(_)catch(_)finally(_)".isSpecialControlStructure)        self.assert (nonEmptyDict.at "try(_)catch(_)catch(_)finally(_)".isTryCatch)    }}def nameDictTests = gU.testSuite.fromTestMethodsIn(self) named "name dictionary tests"nameDictTests.runAndPrintResults